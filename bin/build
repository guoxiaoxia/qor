#!/usr/bin/env node
const mysql = require('mysql');
const walk = require('klaw-sync');
const path = require('path');
const printf = require('printf');
const ObjectSchema = require('../src/object/schema');
const ObjectRouter = require('../src/object/router');
const RelationSchema = require('../src/relation/schema');
const RelationRouter = require('../src/relation/router');

if (process.argv.length != 4) {
	console.error('usage: build_mysql_schema <source_path> <type:object|relation>');
	process.exit(-1);
}

const SOURCE_PATH = path.resolve(process.argv[2]);
const TYPE = process.argv[3].toLowerCase();

walk(SOURCE_PATH, {
	nodir: true,
	filter: item => item.path.endsWith('router.js')
}).forEach(async (item) => {
	try {
		const module = path.dirname(item.path).replace(SOURCE_PATH + '/', '').replace(/\//g, '.');
		switch(TYPE) {
			case 'object':
				await build_object_mysql_schema(module, path.dirname(item.path));
				break;
			case 'relation':
				await build_relation_mysql_schema(module, path.dirname(item.path));
				break;
			default:
				console.error('unknown type ' + TYPE);
				process.exit(-1);
				break;
		}
	}
	catch(err) {
		console.error(err);
		process.exit(-1);
	}
});

async function build_object_mysql_schema(module, path) {
	const schema = new ObjectSchema(module, `${path}/schema`);
	const router = new ObjectRouter(module, `${path}/router`);
	for (let idx = 0; idx < router.persistences.length; ++idx) {
		const persistence = router.persistences[idx];
		if (persistence.media !== 'mysql') {
			continue;
		}

		let {dbSql, tableSql} = generate_object_sqls(module, schema, persistence, idx);
		await execute_sql(dbSql, persistence);
		await execute_sql(tableSql, persistence);
	}
}

function generate_object_sqls(module, schema, persistence, idx) {
	let dbSql = `CREATE DATABASE IF NOT EXISTS ${persistence.database}`;
	let tableSql = '';

	const table = `${persistence.database}.o_${module.replace(/\./g, '_')}_${printf('%03d', idx)}`;
	if (schema.isIntegerId) {
		tableSql = `CREATE TABLE IF NOT EXISTS ${table}(\`id\` INTEGER PRIMARY KEY, data MEDIUMBLOB)`;
	}
	else {
		if (schema.id.maxLength === schema.id.minLength) {
			tableSql = `CREATE TABLE IF NOT EXISTS ${table}(\`id\` CHAR(${schema.id.maxLength}) PRIMARY KEY, data MEDIUMBLOB)`;
		}
		else {
			tableSql = `CREATE TABLE IF NOT EXISTS ${table}(\`id\` VARCHAR(${schema.id.maxLength}) PRIMARY KEY, data MEDIUMBLOB)`;
		}
	}
	return {dbSql, tableSql};
}

async function build_relation_mysql_schema(module, path) {
	const schema = new RelationSchema(module, `${path}/schema`);
	const router = new RelationRouter(module, `${path}/router`);
	for (let idx = 0; idx < router.persistences.length; ++idx) {
		const persistence = router.persistences[idx];
		if (persistence.media !== 'mysql') {
			continue;
		}

		let {dbSql, tableSql} = generate_relation_sqls(module, schema, persistence, idx);
		await execute_sql(dbSql, persistence);
		await execute_sql(tableSql, persistence);
	}	
}

function generate_relation_sqls(module, schema, persistence, idx) {
	let dbSql = `CREATE DATABASE IF NOT EXISTS ${persistence.database}`;
	const table = `${persistence.database}.r_${module.replace(/\./g, '_')}_${printf('%03d', idx)}`;

	let tableSql = `CREATE TABLE IF NOT EXISTS ${table}(`;
	if (schema.isIntegerSubjectId) {
		tableSql += 'subjectId INTEGER';
	}
	else {
		if (schema.subjectId.minLength === schema.subjectId.maxLength) {
			tableSql += `subjectId CHAR(${schema.subjectId.maxLength})`;
		}
		else {
			tableSql += `subjectId VARCHAR(${schema.subjectId.maxLength})`;
		}
	}
	if (schema.isIntegerObjectId) {
		tableSql += ',objectId INTEGER';
	}
	else {
		if (schema.objectId.minLength === schema.objectId.maxLength) {
			tableSql += `,objectId CHAR(${schema.objectId.maxLength})`;
		}
		else {
			tableSql += `,objectId VARCHAR(${schema.objectId.maxLength})`;
		}
	}
	for (let fieldName in schema.relation.properties) {
		let fieldValue = schema.relation.properties[fieldName];
		switch(fieldValue.type) {
			case "integer":
				tableSql += `,${fieldName} INTEGER NOT NULL`;
				break;
			case "string":
				tableSql += `,${fieldName} VARCHAR(255)`;
				break;
			default:
				throw new Error(`unknown relation type ${fieldValue.type}`);
				break;
		}
	}
	for (let fieldName in schema.relation.properties) {
		tableSql += `,INDEX(${fieldName})`;
	}
	tableSql += ',INDEX(subjectId),PRIMARY KEY(subjectId, objectId))';
	return {dbSql, tableSql};
}

async function execute_sql(sql, connParam) {
	let connection = mysql.createConnection({
		host : connParam.host,
		port : connParam.port,
		user : connParam.user,
		password : connParam.password
	});

	return await new Promise((resolve, reject) => {
		connection.connect();
		connection.query(sql, (err) => {
			connection.end();
			if (err) {
				reject(err);
				return;
			}
			resolve();
		});
	});
}
